org: linhtinh603
app: serverless-memory-app
service: serverless-memory-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs14.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example,
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    MEMORY_TABLE: Memory-${self:provider.stage}
    MEMORY_CREATED_AT_INDEX: CreatedAtIndex
    CONNECTION_TABLE: Connection-${self:provider.stage}
    ATTACHMENT_S3_BUCKET: linhhch-serverless-memory-images-${self:provider.stage}
    THUMBNAIL_ATTACHMENT_S3_BUCKET: linhhch-serverless-thumbnail-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKS_URL: https://dev-uzbbwb1udd6opcaq.us.auth0.com/.well-known/jwks.json

  logs:
    # Enable API Gateway logs
    restApi: true
custom:
  topicName: memoryTopic-${self:provider.stage}
  esDomainName: memory-search-${self:provider.stage}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Websocket connection handler
  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:ScanItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTION_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

  # Websocket disconnection handler
  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:ScanItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTION_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

  # Send notification to websocket function
  SendUploadNotification:
    environment:
      STAGE: '${self:provider.stage}'
      API_ID: !Ref 'WebsocketsApi' # It refers to the ID of the WebSockets API that the Lambda function interacts with
    handler: src/lambda/s3/send-notification.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - ${self:provider.region}
                - Ref: 'AWS::AccountId'
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName} # MemorySNSTopic
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Delete
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTION_TABLE}

  # Resize image after upload function
  ResizeImage:
    handler: src/lambda/s3/resize-image.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - ${self:provider.region}
                - Ref: 'AWS::AccountId'
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName} # MemorySNSTopic

  # Push data to Elastic Search function
  SyncWithElasticSearch:
    handler: src/lambda/dynamodb/elastic-search-sync.handler
    environment:
      ES_ENDPOINT: !GetAtt MemorySearch.DomainEndpoint
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt MemoryTable.StreamArn

  # Get Memory function
  GetMemory:
    handler: src/lambda/http/get-memory.handler
    events:
      - http:
          method: get
          path: memories
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORY_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORY_TABLE}/index/${self:provider.environment.MEMORY_CREATED_AT_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

  # Create new Memory function
  CreateMemory:
    handler: src/lambda/http/create-memory.handler
    events:
      - http:
          method: post
          path: memories
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schemas:
              application/json: ${file(models/create-memory-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORY_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

  # Update a Memory function
  UpdateMemory:
    handler: src/lambda/http/update-memory.handler
    events:
      - http:
          method: patch
          path: memories/{memoryId}
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schemas:
              application/json: ${file(models/update-memory-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORY_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

  # Delete a Memory function
  DeleteMemory:
    handler: src/lambda/http/delete-memory.handler
    events:
      - http:
          method: delete
          path: memories/{memoryId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORY_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

  # Generate S3 upload image URL
  GenerateUploadUrl:
    handler: src/lambda/http/generate-upload-url.handler
    events:
      - http:
          method: post
          path: memories/{memoryId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORY_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # Create a DynamoDB table with local secondary index and a composite key
    MemoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MEMORY_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: memoryId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: memoryId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.MEMORY_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        StreamSpecification:
          StreamViewType: 'NEW_IMAGE' # Only new version in the stream

    # Create a DynamoDB table for storing websocket connection
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTION_TABLE}

    # Create S3 bucket
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:*
              Topic: !Ref MemorySNSTopic
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerEnforced
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # Config S3 bucket poliicy
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: S3GetObjectsPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    # Create S3 bucket
    ThumbnailAttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAIL_ATTACHMENT_S3_BUCKET}
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerEnforced
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # Config S3 bucket poliicy
    ThumbnailBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: S3GetObjectsPolicy
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: 'arn:aws:s3:::${self:provider.environment.THUMBNAIL_ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref ThumbnailAttachmentsBucket

    MemorySNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'Memory SNS Topic'
        TopicName: '${self:custom.topicName}'

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: sns:Publish
              Resource: !Ref MemorySNSTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}'
        Topics:
          - !Ref MemorySNSTopic

    # Create a Elastic Search
    MemorySearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: 6.3
        DomainName: '${self:custom.esDomainName}'
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false
          InstanceCount: 1
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: gp2
        AccessPolicies:
          Version: '2012-10-17'
          # Need to apply fine-grained access control in Amazon OpenSearch Service
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:ESHttp*'
              Resource: '*'
              Condition:
                IpAddress:
                  aws:SourceIp:
                    - '117.2.125.66/32'
